// Generated by gencpp from file odom_aux/DistWheel.msg
// DO NOT EDIT!


#ifndef ODOM_AUX_MESSAGE_DISTWHEEL_H
#define ODOM_AUX_MESSAGE_DISTWHEEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace odom_aux
{
template <class ContainerAllocator>
struct DistWheel_
{
  typedef DistWheel_<ContainerAllocator> Type;

  DistWheel_()
    : dist_wheel_left(0.0)
    , dist_wheel_right(0.0)  {
    }
  DistWheel_(const ContainerAllocator& _alloc)
    : dist_wheel_left(0.0)
    , dist_wheel_right(0.0)  {
  (void)_alloc;
    }



   typedef double _dist_wheel_left_type;
  _dist_wheel_left_type dist_wheel_left;

   typedef double _dist_wheel_right_type;
  _dist_wheel_right_type dist_wheel_right;





  typedef boost::shared_ptr< ::odom_aux::DistWheel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::odom_aux::DistWheel_<ContainerAllocator> const> ConstPtr;

}; // struct DistWheel_

typedef ::odom_aux::DistWheel_<std::allocator<void> > DistWheel;

typedef boost::shared_ptr< ::odom_aux::DistWheel > DistWheelPtr;
typedef boost::shared_ptr< ::odom_aux::DistWheel const> DistWheelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::odom_aux::DistWheel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::odom_aux::DistWheel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::odom_aux::DistWheel_<ContainerAllocator1> & lhs, const ::odom_aux::DistWheel_<ContainerAllocator2> & rhs)
{
  return lhs.dist_wheel_left == rhs.dist_wheel_left &&
    lhs.dist_wheel_right == rhs.dist_wheel_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::odom_aux::DistWheel_<ContainerAllocator1> & lhs, const ::odom_aux::DistWheel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace odom_aux

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::odom_aux::DistWheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::odom_aux::DistWheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::odom_aux::DistWheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::odom_aux::DistWheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom_aux::DistWheel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::odom_aux::DistWheel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::odom_aux::DistWheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57b8e63d18e13e369832ee12d7ad4dcc";
  }

  static const char* value(const ::odom_aux::DistWheel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57b8e63d18e13e36ULL;
  static const uint64_t static_value2 = 0x9832ee12d7ad4dccULL;
};

template<class ContainerAllocator>
struct DataType< ::odom_aux::DistWheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "odom_aux/DistWheel";
  }

  static const char* value(const ::odom_aux::DistWheel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::odom_aux::DistWheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 dist_wheel_left\n"
"float64 dist_wheel_right\n"
;
  }

  static const char* value(const ::odom_aux::DistWheel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::odom_aux::DistWheel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dist_wheel_left);
      stream.next(m.dist_wheel_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DistWheel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::odom_aux::DistWheel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::odom_aux::DistWheel_<ContainerAllocator>& v)
  {
    s << indent << "dist_wheel_left: ";
    Printer<double>::stream(s, indent + "  ", v.dist_wheel_left);
    s << indent << "dist_wheel_right: ";
    Printer<double>::stream(s, indent + "  ", v.dist_wheel_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ODOM_AUX_MESSAGE_DISTWHEEL_H
